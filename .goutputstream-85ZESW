# -*- encoding: utf-8 -*-

import time
from datetime import datetime
from dateutil.relativedelta import relativedelta
from dateutil import rrule

from osv import osv
from osv import fields
from tools.translate import _
from tools.misc import DEFAULT_SERVER_DATE_FORMAT as DT_FORMAT

class holiday_year(osv.osv):
    _name = 'training.holiday.year'
    _rec_name = 'year'
    _columns = {
        'year' : fields.integer('Year', select=1, required=True),
        'period_ids' : fields.one2many('training.holiday.period', 'year_id', 'Holiday Periods'),
    }
    _defaults = {
        'year' : lambda *a: datetime.today().year,
    }
    _sql_constraints = [
        ('uniq_year', 'unique(year)', 'The year must be unique !'),
    ]

holiday_year()

class holiday_period(osv.osv):
    _name = 'training.holiday.period'
    _columns = {
        'year_id' : fields.many2one('training.holiday.year', 'Year', required=True, ondelete='cascade'),
        'name' : fields.char('Name', size=64, required=True),
        'date_start' : fields.date('Date Start', required=True),
        'date_stop' : fields.date('Date Stop', required=True),
        'active' : fields.boolean('Active'),
        }
    _defaults = {
        'active' : lambda *a: 1,
        'date_start' : lambda *a: time.strftime(DT_FORMAT),
        'date_stop' : lambda *a: time.strftime(DT_FORMAT),
    }

    def _check_date_start_stop(self, cr, uid, ids, context=None):
        if not ids:
            return False
        obj = self.browse(cr, uid, ids[0], context=context)
        return obj.date_start <= obj.date_stop

    def is_in_period(self, cr, date):
        if not date:
            raise osv.except_osv(_('Error'),
                                 _('No date specified for \'Is in period\' holiday period check'))
        cr.execute("SELECT count(id) "
                   "FROM training_holiday_period "
                   "WHERE %s BETWEEN date_start AND date_stop AND active='1'",
                   (date,))
        return cr.fetchone()[0] > 0

    _constraints = [
        (_check_date_start_stop, "Please, check the start date !", ['date_start', 'date_stop']),
    ]

holiday_period()

class holiday_year_wizard(osv.osv):
    _name = 'training.holiday.year.wizard'
    _columns = {
        'year' : fields.integer('Year', required=True),
    }
    _defaults = {
        'year' : lambda *a: datetime.today().year,
    }

    def action_cancel(self, cr, uid, ids, context=None):
        return {'type': 'ir.actions.act_window_close'}

    def action_apply(self, cr, uid, ids, context=None):
        if not ids:
            return False
        holiday_year_obj = self.pool.get('training.holiday.year')
        holiday_period_obj = self.pool.get('training.holiday.period')

        wizard = self.browse(cr, uid, ids[0], context=context)
        try:
            year_start = datetime.strptime('%04s-01-01' % (wizard.year,), DT_FORMAT)
            year_end = datetime.strptime('%04s-12-31' % (wizard.year,), DT_FORMAT)
        except:
            raise osv.except_osv(_('Error!'),
                                _('Please enter valid year'))

        year_id = holiday_year_obj.create(cr, uid, {'year' : wizard.year}, context=context)

        # Generate holiday periods for each week-end of requested year
        # NOTE: we use ISO week number, but if the 1st saturday of the
        #       year is before the 1st thursday we force week-num to 0
        year_rule = rrule.rrule(rrule.DAILY, dtstart=year_start, until=year_end, byweekday=(rrule.SA))
        for saturday in year_rule:
            iso_year, iso_weeknum, iso_weekday = saturday.isocalendar()
            weeknum = iso_year == wizard.year and iso_weeknum or 0
            holiday_period_obj.create(cr, uid, {
                'year_id' : year_id,
                'date_start' : saturday.strftime(DT_FORMAT),
                'date_stop' : (saturday+relativedelta(days=1)).strftime(DT_FORMAT),
                'name' : _('Week-End %02d') % (weeknum,)
            }, context=context),

        return {
            'view_type': 'form',
            'view_mode': 'form',
            'res_model': 'training.holiday.year',
            'type': 'ir.actions.act_window',
            'target': 'current',
            'res_id' : year_id,
        }
    '''
    def action_apply_scheduler(self, cr, uid, context=None):
        holiday_year_obj = self.pool.get('training.holiday.year')
        holiday_period_obj = self.pool.get('training.holiday.period')
        date=datetime.now()
        year=date.strftime("%Y")
        year= int(year)
        year +=1
        try:
            year_start = datetime.strptime('%04s-01-01' % (year,), DT_FORMAT)
            year_end = datetime.strptime('%04s-12-31' % (year,), DT_FORMAT)
        except:
            raise osv.except_osv(_('Error!'),
                                _('Please enter valid year'))

        year_id = holiday_year_obj.create(cr, uid, {'year' : year}, context=context)

        # Generate holiday periods for each week-end of requested year
        # NOTE: we use ISO week number, but if the 1st saturday of the
        #       year is before the 1st thursday we force week-num to 0
        year_rule = rrule.rrule(rrule.DAILY, dtstart=year_start, until=year_end, byweekday=(rrule.SA))
        for saturday in year_rule:
            iso_year, iso_weeknum, iso_weekday = saturday.isocalendar()
            weeknum = iso_year == year and iso_weeknum or 0
            holiday_period_obj.create(cr, uid, {
                'year_id' : year_id,
                'date_start' : saturday.strftime(DT_FORMAT),
                'date_stop' : (saturday+relativedelta(days=1)).strftime(DT_FORMAT),
                'name' : _('Week-End %02d') % (weeknum,)
            }, context=context),

        return True
    '''
holiday_year_wizard()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
